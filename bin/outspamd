#!/usr/bin/env perl

use warnings;
use strict;
#use Data::Dumper;
use DBI;
use FindBin qw($Bin $Script);
use Daemon::Generic;

use lib "$Bin/../lib";
use Outspam;

my $conf = {
  'domain' => '',
  'mynet' => '',
  'friendnet' => '',
  'db' => '',
  'dbhost' => '',
  'dbuser'=> '',
  'dbpassword' => '',
  'mistrust' => '',
  'msgs_sec' => '',
  'ignore_sender' => '',
  'sndr_ip_mistrust' => '',
  'ban_action' => '',
  'outspam_notify' => '',
  'outspamd_pid_file' => '',
};

my $verbose = grep (/--verbose/, @ARGV) ? 1 : 0;

my $config_file = "$Bin/../etc/outspam.conf";
read_config($config_file,$conf);

#print Dumper($conf->{'sndr_ip_mistrust'}); die;

my $conn = db_connect($conf);

#msg_sec_test(); die;

newdaemon(
            pidfile => $conf->{'outspamd_pid_file'},
            configfile => $config_file,
     );

sub gd_run
     {
         while(1) {
               sleep(10);
               msg_sec_test(); 
            }
     }

sub gd_preconfig {
    read_config($config_file,$conf);
    return ();
}    

# ====================================================

sub msg_sec_test {
    foreach my $sec (sort { $b <=> $a } keys %{$conf->{'msgs_sec'}} ) {
        print "=== $sec\n" if $verbose;
        my $qstr = "select distinct replace(sndr,\'\@$conf->{'domain'}\',\'\') as sndr, count(rcpt) as nsent".
        " from maillog m1 where outgo=1 and unix_timestamp()-m1.time < " .$sec.
        " and not exists (select * from maillog m2 where m2.sndr=m1.rcpt and outgo=0)".
        " and not exists (select * from maillog m3 where m3.rcpt=m1.rcpt and m3.msg != m1.msg and stat=\'sent\' and outgo=1)".
        " and not exists ( select * from maillog m4 where m1.msg=m4.msg and m1.rcpt=m4.rcpt and m1.stat!=m4.stat and outgo!=-1)".
        " group by sndr";

        my $q = $conn->prepare($qstr);
        $q->execute() or query_err($conn,$qstr);

        while ( my $r  = $q->fetchrow_hashref() ) {
            my $coef = $conf->{'mistrust'}->{$r->{'sndr'}};
            $coef = 1 unless defined $coef;
            my $ip_mistrust = sndr_ip_mistrust($r->{'sndr'},$sec);
            my $score = $r->{'nsent'} * $coef * $ip_mistrust; 
            print "$r->{'sndr'} $r->{'nsent'} \($score\) \(ip_mistrust: $ip_mistrust\) require $conf->{'msgs_sec'}->{$sec}" if $verbose;
            if ( $score > $conf->{'msgs_sec'}->{$sec} ) {
               system(subst_percent($conf->{'ban_action'},$r->{'sndr'})) || mark_ignore($r->{'sndr'},$sec);
               system( subst_percent( $conf->{'outspam_notify'}, [ $r->{'sndr'},$r->{'nsent'},$sec ] ) );
            }   
        }
    }    
}

sub sndr_ip_mistrust {
    (my $sndr, my$sec) = @_;
    my $qstr = "select sndr, relay from maillog where outgo=1 and sndr=\'$sndr\@$conf->{'domain'}\'".
              " and unix_timestamp()-time < $sec group by sndr,relay";

    my $q = $conn->prepare($qstr);
    $q->execute() or query_err($conn,$qstr);

    my $alien_ip_count = 0;
    while ( my $r  = $q->fetchrow_hashref() ) {
       $alien_ip_count++ unless in_netblock($r->{'relay'},(@{$conf->{'friendnet'}},@{$conf->{'mynet'}}));
    }    
    return $conf->{'sndr_ip_mistrust'}->{'base'} ** $alien_ip_count;
}    

sub mark_ignore  {
    (my $sndr, my $sec ) = @_;
    my $qstr = "update maillog  set outgo=-1 where outgo=1 and sndr=\'$sndr\@$conf->{'domain'}\'".
               " and unix_timestamp()-time < " .$sec;
    my $q = $conn->prepare($qstr);
    $q->execute() or query_err($conn,$qstr);
} 

