#!/usr/bin/env perl

use warnings;
use strict;
use Data::Dumper;
use DBI;
use FindBin qw($Bin $Script);
use Daemon::Generic;

use lib "$Bin/../lib";
use Outspam;

my $conf = {
  'maillog' => '',
  'domain' => '',
  'outmail_bookmark'=> '',
  'outmail_pid_file'=> '',
  'ignore_sender' => '',
  'db' => '',
  'dbhost' => '',
  'dbuser'=> '',
  'dbpassword' => '',
 };


my $verbose = grep (/--verbose/, @ARGV) ? 1 : 0;

my $config_file = "$Bin/../etc/outspam.conf";
read_config($config_file,$conf);
my $from_filter = '.+\@' . $conf->{'domain'};
my $to_filter = '.+\@(?!' . $conf->{'domain'} . ')[^>]+';
my $conn = db_connect($conf);

# proc_main(); die;

newdaemon(
            pidfile => $conf->{'outmail_pid_file'},
            configfile => $config_file,
     );

sub gd_run
     {
         while(1) {
               sleep(8);
               proc_main();
            }
     }

# ====================================================
sub proc_main {
    (my $init, my $f) = initproc($conf);

    my %mail;
    my @msgid;
    my $cur_last_msg;
    while ( <$f> ) {
        next unless / sm-mta\[\d+\]: /;
        my $regex = '^\w+ \d+ (?:\d+:\d+:\d+) \S+ sm-mta\[\d+\]: (\S+): from=<([^>]+)>, '.
                    'size=(\d+), class=\S+, nrcpts=(\d+), .* relay=[^\[]*\[([\d\.]+)\]';
        if ( /$regex/i ) {
           my $sndr = lc $2;
           next if grep { $sndr =~ /$_/ } @{$conf->{'ignore_sender'}};
           my $msg = $1;
           if ( defined $init->{'bm_end'} ) {
              undef $init->{'bm_end'} if $init->{'bm_end'} eq $msg;
              next;
           }    
           $mail{$msg} = {'sndr'=>$sndr, 'size'=>$3, 'nrcpts'=>$4, 'relay'=>$5 };
        }    
        elsif ( /^(\w+) (\d+) (\S+) \S+ \S+ (\S+): to=<([^>]+)>, .* stat=(.*)/i ) {
           my $msg = $4;
           next unless $mail{$msg};
           my $rcpt = lc $5;
           my $stat = lc stat_simplify($6);
           $mail{$msg}->{'time'}=date2sec($3,$2,$1,$init);
           $mail{$msg}->{'stat'} = $stat;
           $mail{$msg}->{'outgo'} = $mail{$msg}->{'sndr'} =~ /$from_filter/ ? 1 : 0;
           next unless $mail{$msg}->{'outgo'} || $stat eq 'sent';
           next if $mail{$msg}->{'outgo'} && $rcpt =~ /$from_filter/; 
           $mail{$msg}->{'rcpt'}=$rcpt;
           $cur_last_msg = $msg;
           print "$msg ",Dumper $mail{$msg} if $verbose;

        }    
    }
    close $f;
    
    return unless $cur_last_msg;

    foreach my $k (sort keys(%mail)) {
       next unless $mail{$k}->{'rcpt'};
       $conn->quote($mail{$k}->{'stat'});
       my $query_str = mk_ins_query($k,$mail{$k});
       if ( $query_str ) {
          my $query = $conn->prepare($query_str);
          $query->execute() or query_err($conn,$query_str); 
       }   
    }    

    wbookmark($conf,$init,$cur_last_msg);
}

# ====================================================

sub stat_simplify {
    my $stat = shift;
    if ($stat =~ /^Sent /) { $stat = "sent"; }
    #    elsif ($stat =~ /^Deferred/) { $stat = "defered"; }
    $stat =~ s/'/\\'/g;
    return $stat;
}    

sub mk_ins_query {
    (my $msg, my $h) = @_;
    my $q = "";
    foreach my $k (keys (%$h)) {
        $q .= ", " if $q;
        $q .= "$k=\'$h->{$k}\'";
    }
    $q = "insert ignore maillog set msg=\'$msg\', ".$q if $q;
    return $q;
}    

