#!/usr/bin/env perl

use warnings;
use strict;
use Data::Dumper;
use DBI;
use FindBin qw($Bin $Script);
#use Daemon::Generic;

use lib "$Bin/../lib";
use Outspam;

my $conf = {
  'maillog' => '',
  'domain' => '',
  'outmail_bookmark'=> '',
  'outmail_pid_file'=> '',
  'ignore_sender' => '',
  'db' => '',
  'dbhost' => '',
  'dbuser'=> '',
  'dbpassword' => '',
 };


my $verbose = grep (/--verbose/, @ARGV) ? 1 : 0;
my $debug = grep (/--debug/, @ARGV) ? 1 : 0;
my $parse_maillog = '';
if ( my @i = grep(/-parse=\S+/, @ARGV) ) {
   $i[0] =~ /=(\S+)/;
   $parse_maillog = $1;
}    
$debug = 1 if $parse_maillog;
$verbose = 1 if $debug;

my $config_file = "$Bin/../etc/outspam.conf";
read_config($config_file,$conf);
my $from_filter = '.+\@' . $conf->{'domain'};
my $to_filter = '.+\@(?!' . $conf->{'domain'} . ')[^>]+';
my $conn = db_connect($conf) unless $parse_maillog;

my %mail;

#while (1) {
#  proc_main();
#  die;
#  sleep(8);
#}
#die;

if ( $parse_maillog ) {
   $conf->{'maillog'} = $parse_maillog; 
   proc_main();
}
else {
   newdaemon(pidfile => $conf->{'outmail_pid_file'},
             configfile => $config_file) ;
}


sub gd_run
     {
         while( proc_main() ) {
               sleep(5);
            }
     }

# ====================================================
sub proc_main {
    (my $init, my $f) = initproc($conf);

    my @msgid;
    my $cur_last_line;
    my $cur_first_msg;
    while ( <$f> ) {
        next unless / sm-mta\[\d+\]: /;
        $cur_last_line = $_;
        if ( defined $init->{'bm_end'} ) {
      	  undef $init->{'bm_end'} if $init->{'bm_end'} eq $cur_last_line;
	      next;
        }    
        my $regex = '^\w+ +\d+\s+(?:\d+:\d+:\d+) +\S+ +sm-mta\[\d+\]: +(\S+): +from=<([^>]+)>, +'.
                    'size=(\d+), +class=\S+, +nrcpts=(\d+), .* relay=[^\[]*\[([\d\.]+)\]';
        print "examine string: $_" if $debug;
        if ( /$regex/i ) {
           my $sndr = lc $2;
           next if grep { $sndr =~ /$_/ } @{$conf->{'ignore_sender'}};
           my $msg = $1;
           $mail{$msg} = {
                           'sndr'=>$sndr, 'size'=>$3, 'nrcpts'=>$4, 'relay'=>$5,
                           'rcpts'=>{}, 'rcount'=>0 
                         };
           $mail{$msg}->{'outgo'} = $mail{$msg}->{'sndr'} =~ /$from_filter/ ? 1 : 0;
           print "+++!!!+++ match from=\n" if $debug;
        }    
        elsif ( /^(\w+) +(\d+) +(\S+) +\S+ +\S+ +(\S+): to=<([^>]+)>, .* stat=(.*)/i ) {
           my $msg = $4;
           next unless $mail{$msg};
           my $rcpt = lc $5;
           my $stat = lc stat_simplify($6);
           my $r = $mail{$msg}->{'rcpts'};
           my $idx = $mail{$msg}->{'rcount'};
           $r->{$idx}->{'time'}=date2sec($3,$2,$1,$init);
           $r->{$idx}->{'stat'} = $stat;
           next unless $mail{$msg}->{'outgo'} || $stat eq 'sent';
           next if $mail{$msg}->{'outgo'} && $rcpt =~ /$from_filter/;
           $r->{$idx}->{'rcpt'}=$rcpt;
           ++$mail{$msg}->{'rcount'};
           $cur_first_msg = $msg unless defined $cur_first_msg;
           print "--!!!-- match to= --!!!--\n" if $debug;
           print "$msg ",Dumper $mail{$msg} if $verbose;
        }    
        else {
           print "--!!!-- not match --!!!--\n" if $debug;
        }
    }
    close $f;

    unless ( $parse_maillog ) {
        wbookmark($conf,$init,$cur_last_line);
        return 1 unless defined $cur_first_msg;
    }

    foreach my $k (sort keys(%mail)) {
       my $r =  $mail{$k}->{'rcpts'};
       foreach my $i (sort keys(%$r)) { 
          next unless $r->{$i}->{'rcpt'};
          $conn->quote($r->{$i}->{'stat'}) unless $parse_maillog;
          foreach (qw (sndr size nrcpts relay outgo)) {
             $r->{$i}->{$_} = $mail{$k}->{$_}; 
          }    
          my $query_str = mk_ins_query($k,$r->{$i});
          print "query_str: $query_str\n" if $debug;
          if ( $query_str && !$parse_maillog ) {
             my $query = $conn->prepare($query_str);
             $query->execute() or query_err($conn,$query_str);
             $query->finish(); 
          }
       }    
       undef $mail{$k};
    }    
    # очистить бы $mail от великовозрастных
    return 1;
}

# ====================================================

sub stat_simplify {
    my $stat = shift;
    if ($stat =~ /^Sent /) { $stat = "sent"; }
    #    elsif ($stat =~ /^Deferred/) { $stat = "defered"; }
    $stat =~ s/'/\\'/g;
    return $stat;
}    

sub mk_ins_query {
    (my $msg, my $h) = @_;
    my $q = "";
    foreach my $k (keys (%$h)) {
        $q .= ", " if $q;
        $q .= "$k=\'$h->{$k}\'";
        if ( $debug && ! defined ($h->{$k}) ) {
           print "**** undefinded in msg $msg **** : ";
           print Dumper($h);
        }
    }
    $q = "insert maillog set msg=\'$msg\', ".$q. " on duplicate key update time=$h->{'time'}" if $q;
    return $q;
}    

